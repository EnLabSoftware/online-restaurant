//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Enterprise.AdminUI.CartService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CartService.ICartService")]
    public interface ICartService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICartService/RemoveFromCart", ReplyAction="http://tempuri.org/ICartService/RemoveFromCartResponse")]
        bool RemoveFromCart(string cartId, int menuItemId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICartService/RemoveFromCart", ReplyAction="http://tempuri.org/ICartService/RemoveFromCartResponse")]
        System.Threading.Tasks.Task<bool> RemoveFromCartAsync(string cartId, int menuItemId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICartService/AddToCart", ReplyAction="http://tempuri.org/ICartService/AddToCartResponse")]
        bool AddToCart(string cartId, int menuItemId, int count, bool isGridUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICartService/AddToCart", ReplyAction="http://tempuri.org/ICartService/AddToCartResponse")]
        System.Threading.Tasks.Task<bool> AddToCartAsync(string cartId, int menuItemId, int count, bool isGridUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICartService/CheckOut", ReplyAction="http://tempuri.org/ICartService/CheckOutResponse")]
        bool CheckOut(Enterprise.Logic.Entities.Order order);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICartService/CheckOut", ReplyAction="http://tempuri.org/ICartService/CheckOutResponse")]
        System.Threading.Tasks.Task<bool> CheckOutAsync(Enterprise.Logic.Entities.Order order);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICartService/GetCart", ReplyAction="http://tempuri.org/ICartService/GetCartResponse")]
        System.Collections.Generic.List<Enterprise.Logic.Entities.Cart> GetCart(string cartId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICartService/GetCart", ReplyAction="http://tempuri.org/ICartService/GetCartResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Enterprise.Logic.Entities.Cart>> GetCartAsync(string cartId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICartService/EmptyCart", ReplyAction="http://tempuri.org/ICartService/EmptyCartResponse")]
        void EmptyCart(string cartId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICartService/EmptyCart", ReplyAction="http://tempuri.org/ICartService/EmptyCartResponse")]
        System.Threading.Tasks.Task EmptyCartAsync(string cartId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICartService/GetTotal", ReplyAction="http://tempuri.org/ICartService/GetTotalResponse")]
        decimal GetTotal(string cartId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICartService/GetTotal", ReplyAction="http://tempuri.org/ICartService/GetTotalResponse")]
        System.Threading.Tasks.Task<decimal> GetTotalAsync(string cartId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICartService/MigrateCart", ReplyAction="http://tempuri.org/ICartService/MigrateCartResponse")]
        void MigrateCart(string cartId, string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICartService/MigrateCart", ReplyAction="http://tempuri.org/ICartService/MigrateCartResponse")]
        System.Threading.Tasks.Task MigrateCartAsync(string cartId, string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICartService/GetOrderModel", ReplyAction="http://tempuri.org/ICartService/GetOrderModelResponse")]
        System.Collections.Generic.List<Enterprise.Logic.Entities.OrderModel> GetOrderModel();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICartService/GetOrderModel", ReplyAction="http://tempuri.org/ICartService/GetOrderModelResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Enterprise.Logic.Entities.OrderModel>> GetOrderModelAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICartService/GetListOrderDetail", ReplyAction="http://tempuri.org/ICartService/GetListOrderDetailResponse")]
        System.Collections.Generic.List<Enterprise.Logic.Entities.OrderDetailModel> GetListOrderDetail(int orderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICartService/GetListOrderDetail", ReplyAction="http://tempuri.org/ICartService/GetListOrderDetailResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Enterprise.Logic.Entities.OrderDetailModel>> GetListOrderDetailAsync(int orderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICartService/UpdateOrderDetailQuantity", ReplyAction="http://tempuri.org/ICartService/UpdateOrderDetailQuantityResponse")]
        Enterprise.Logic.Entities.OrderDetail UpdateOrderDetailQuantity(int orderDetailsId, int quantity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICartService/UpdateOrderDetailQuantity", ReplyAction="http://tempuri.org/ICartService/UpdateOrderDetailQuantityResponse")]
        System.Threading.Tasks.Task<Enterprise.Logic.Entities.OrderDetail> UpdateOrderDetailQuantityAsync(int orderDetailsId, int quantity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICartService/GetOrderStatuses", ReplyAction="http://tempuri.org/ICartService/GetOrderStatusesResponse")]
        System.Collections.Generic.List<Enterprise.Logic.Entities.OrderStatus> GetOrderStatuses();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICartService/GetOrderStatuses", ReplyAction="http://tempuri.org/ICartService/GetOrderStatusesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Enterprise.Logic.Entities.OrderStatus>> GetOrderStatusesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICartService/GetOrders", ReplyAction="http://tempuri.org/ICartService/GetOrdersResponse")]
        System.Collections.Generic.List<Enterprise.Logic.Entities.Order> GetOrders();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICartService/GetOrders", ReplyAction="http://tempuri.org/ICartService/GetOrdersResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Enterprise.Logic.Entities.Order>> GetOrdersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICartService/UpdateOrder", ReplyAction="http://tempuri.org/ICartService/UpdateOrderResponse")]
        Enterprise.Logic.Entities.Order UpdateOrder(Enterprise.Logic.Entities.Order order);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICartService/UpdateOrder", ReplyAction="http://tempuri.org/ICartService/UpdateOrderResponse")]
        System.Threading.Tasks.Task<Enterprise.Logic.Entities.Order> UpdateOrderAsync(Enterprise.Logic.Entities.Order order);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICartService/DeleteOrder", ReplyAction="http://tempuri.org/ICartService/DeleteOrderResponse")]
        bool DeleteOrder(int orderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICartService/DeleteOrder", ReplyAction="http://tempuri.org/ICartService/DeleteOrderResponse")]
        System.Threading.Tasks.Task<bool> DeleteOrderAsync(int orderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICartService/DeleteOrderDetails", ReplyAction="http://tempuri.org/ICartService/DeleteOrderDetailsResponse")]
        bool DeleteOrderDetails(int orderDetailsId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICartService/DeleteOrderDetails", ReplyAction="http://tempuri.org/ICartService/DeleteOrderDetailsResponse")]
        System.Threading.Tasks.Task<bool> DeleteOrderDetailsAsync(int orderDetailsId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICartService/GetOrder", ReplyAction="http://tempuri.org/ICartService/GetOrderResponse")]
        Enterprise.Logic.Entities.Order GetOrder(int orderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICartService/GetOrder", ReplyAction="http://tempuri.org/ICartService/GetOrderResponse")]
        System.Threading.Tasks.Task<Enterprise.Logic.Entities.Order> GetOrderAsync(int orderId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICartServiceChannel : Enterprise.AdminUI.CartService.ICartService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CartServiceClient : System.ServiceModel.ClientBase<Enterprise.AdminUI.CartService.ICartService>, Enterprise.AdminUI.CartService.ICartService {
        
        public CartServiceClient() {
        }
        
        public CartServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CartServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CartServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CartServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool RemoveFromCart(string cartId, int menuItemId) {
            return base.Channel.RemoveFromCart(cartId, menuItemId);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveFromCartAsync(string cartId, int menuItemId) {
            return base.Channel.RemoveFromCartAsync(cartId, menuItemId);
        }
        
        public bool AddToCart(string cartId, int menuItemId, int count, bool isGridUpdate) {
            return base.Channel.AddToCart(cartId, menuItemId, count, isGridUpdate);
        }
        
        public System.Threading.Tasks.Task<bool> AddToCartAsync(string cartId, int menuItemId, int count, bool isGridUpdate) {
            return base.Channel.AddToCartAsync(cartId, menuItemId, count, isGridUpdate);
        }
        
        public bool CheckOut(Enterprise.Logic.Entities.Order order) {
            return base.Channel.CheckOut(order);
        }
        
        public System.Threading.Tasks.Task<bool> CheckOutAsync(Enterprise.Logic.Entities.Order order) {
            return base.Channel.CheckOutAsync(order);
        }
        
        public System.Collections.Generic.List<Enterprise.Logic.Entities.Cart> GetCart(string cartId) {
            return base.Channel.GetCart(cartId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Enterprise.Logic.Entities.Cart>> GetCartAsync(string cartId) {
            return base.Channel.GetCartAsync(cartId);
        }
        
        public void EmptyCart(string cartId) {
            base.Channel.EmptyCart(cartId);
        }
        
        public System.Threading.Tasks.Task EmptyCartAsync(string cartId) {
            return base.Channel.EmptyCartAsync(cartId);
        }
        
        public decimal GetTotal(string cartId) {
            return base.Channel.GetTotal(cartId);
        }
        
        public System.Threading.Tasks.Task<decimal> GetTotalAsync(string cartId) {
            return base.Channel.GetTotalAsync(cartId);
        }
        
        public void MigrateCart(string cartId, string userId) {
            base.Channel.MigrateCart(cartId, userId);
        }
        
        public System.Threading.Tasks.Task MigrateCartAsync(string cartId, string userId) {
            return base.Channel.MigrateCartAsync(cartId, userId);
        }
        
        public System.Collections.Generic.List<Enterprise.Logic.Entities.OrderModel> GetOrderModel() {
            return base.Channel.GetOrderModel();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Enterprise.Logic.Entities.OrderModel>> GetOrderModelAsync() {
            return base.Channel.GetOrderModelAsync();
        }
        
        public System.Collections.Generic.List<Enterprise.Logic.Entities.OrderDetailModel> GetListOrderDetail(int orderId) {
            return base.Channel.GetListOrderDetail(orderId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Enterprise.Logic.Entities.OrderDetailModel>> GetListOrderDetailAsync(int orderId) {
            return base.Channel.GetListOrderDetailAsync(orderId);
        }
        
        public Enterprise.Logic.Entities.OrderDetail UpdateOrderDetailQuantity(int orderDetailsId, int quantity) {
            return base.Channel.UpdateOrderDetailQuantity(orderDetailsId, quantity);
        }
        
        public System.Threading.Tasks.Task<Enterprise.Logic.Entities.OrderDetail> UpdateOrderDetailQuantityAsync(int orderDetailsId, int quantity) {
            return base.Channel.UpdateOrderDetailQuantityAsync(orderDetailsId, quantity);
        }
        
        public System.Collections.Generic.List<Enterprise.Logic.Entities.OrderStatus> GetOrderStatuses() {
            return base.Channel.GetOrderStatuses();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Enterprise.Logic.Entities.OrderStatus>> GetOrderStatusesAsync() {
            return base.Channel.GetOrderStatusesAsync();
        }
        
        public System.Collections.Generic.List<Enterprise.Logic.Entities.Order> GetOrders() {
            return base.Channel.GetOrders();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Enterprise.Logic.Entities.Order>> GetOrdersAsync() {
            return base.Channel.GetOrdersAsync();
        }
        
        public Enterprise.Logic.Entities.Order UpdateOrder(Enterprise.Logic.Entities.Order order) {
            return base.Channel.UpdateOrder(order);
        }
        
        public System.Threading.Tasks.Task<Enterprise.Logic.Entities.Order> UpdateOrderAsync(Enterprise.Logic.Entities.Order order) {
            return base.Channel.UpdateOrderAsync(order);
        }
        
        public bool DeleteOrder(int orderId) {
            return base.Channel.DeleteOrder(orderId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteOrderAsync(int orderId) {
            return base.Channel.DeleteOrderAsync(orderId);
        }
        
        public bool DeleteOrderDetails(int orderDetailsId) {
            return base.Channel.DeleteOrderDetails(orderDetailsId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteOrderDetailsAsync(int orderDetailsId) {
            return base.Channel.DeleteOrderDetailsAsync(orderDetailsId);
        }
        
        public Enterprise.Logic.Entities.Order GetOrder(int orderId) {
            return base.Channel.GetOrder(orderId);
        }
        
        public System.Threading.Tasks.Task<Enterprise.Logic.Entities.Order> GetOrderAsync(int orderId) {
            return base.Channel.GetOrderAsync(orderId);
        }
    }
}
